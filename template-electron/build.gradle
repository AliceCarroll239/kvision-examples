buildscript {
    ext.production = (findProperty('prod') ?: 'false') == 'true'

    repositories {
        jcenter()
        maven { url = 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://kotlin.bintray.com/kotlinx' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:${frontendPluginVersion}"
    }
}

plugins {
    id "com.moowork.grunt" version "1.2.0"
}

apply plugin: 'kotlin2js'

if (production) {
    apply plugin: 'kotlin-dce-js'
}
apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlinx-serialization'

repositories {
    jcenter()
    maven { url = 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url = 'https://kotlin.bintray.com/kotlinx' }
    maven { url = 'https://dl.bintray.com/kotlin/kotlin-js-wrappers' }
    maven { url = 'https://dl.bintray.com/gbaldeck/kotlin' }
    maven { url = 'https://dl.bintray.com/rjaros/kotlin' }
    mavenLocal()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:${kotlinVersion}"
    compile "pl.treksoft:kvision:${kvisionVersion}"
    compile "pl.treksoft:kvision-bootstrap:${kvisionVersion}"
    compile "pl.treksoft:kvision-i18n:${kvisionVersion}"
    compile "pl.treksoft:kvision-electron:${kvisionVersion}"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:${kotlinVersion}"
}

node {
    version = nodeJsVersion
    download = true
}

kotlinFrontend {

    webpackBundle {
        bundleName = "main"
        contentPath = file('src/main/web')
        mode = production ? "production" : "development"
    }

    define "PRODUCTION", production

}

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js/${project.name}.js"
    kotlinOptions.sourceMap = !production
    kotlinOptions.moduleKind = 'umd'
}

compileTestKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js-tests/${project.name}-tests.js"
    kotlinOptions.sourceMap = !production
    kotlinOptions.moduleKind = 'umd'
}

task pot(type: GruntTask) {
    args = ["pot"]
}

task po2json(type: GruntTask) {
    args = ["default"]
    if (file('translation').isDirectory()) {
        inputs.dir(file('translation'))
        outputs.dir(file('build/js'))
        outputs.dir(file('build/kotlin-js-min/main'))
    }
}

pot.dependsOn 'installGrunt'
pot.dependsOn 'npmInstall'
po2json.dependsOn 'installGrunt'
po2json.dependsOn 'npmInstall'

task copyResources(type: Copy) {
    from "src/main/resources"
    into file(buildDir.path + "/js")
}

task copyResourcesForDce() {
    doLast {
        copy {
            from "src/main/resources"
            ext.modulesDir = new File("${buildDir.path}/node_modules_imported/")
            modulesDir.eachDir {
                if (it.name.startsWith("kvision")) {
                    from(it) {
                        include "css/**"
                        include "img/**"
                        include "js/**"
                    }
                }
            }
            into file(buildDir.path + "/kotlin-js-min/main")
        }
    }
}

task dist(type: Copy, dependsOn: 'bundle') {
    from "src/main/web"
    from "${buildDir.path}/bundle"
    into file(buildDir.path + "/distributions/" + project.name)
}

task distZip(type: Zip, dependsOn: 'dist') {
    from(buildDir.path + "/distributions/" + project.name)
}

task buildApp(group: 'build', dependsOn: 'dist') {
    doLast {
        def targetDir = file(buildDir.path + "/distributions/" + project.name)

        copy {
            from 'src/main/electron'
            into targetDir
        }
    }
}

task runApp(group: 'debug', dependsOn: [ 'buildApp' ]) {
    doLast {
        def osName = System.getProperty('os.name').toLowerCase()
        def isWindows = osName.contains('windows')

        def localNodeInstallDir = node.workDir.listFiles().find {
            it.name.startsWith('node-') && it.name.contains(node.version)
        }
        def nodeDir = isWindows ? localNodeInstallDir : new File(localNodeInstallDir, 'bin')

        exec {
            workingDir "${buildDir.path}/distributions/${project.name}"
            environment 'PATH', System.getenv('PATH') + File.pathSeparator + nodeDir.absolutePath
            if (isWindows) {
                commandLine 'cmd', '/c', '"../../../node_modules/.bin/electron" .'
            } else {
                commandLine '../../../node_modules/.bin/electron', '.'
            }
        }
    }
}

task bundleApp(group: 'build', dependsOn: buildApp) {
    outputs.dir(project.file('build/electron'))

    doLast {
        def osName = System.getProperty('os.name').toLowerCase()

        def isWindows = osName.contains('windows')

        def localNodeInstallDir = node.workDir.listFiles().find {
            it.name.startsWith('node-') && it.name.contains(node.version)
        }
        def nodeDir = isWindows ? localNodeInstallDir : new File(localNodeInstallDir, 'bin')

        def targetDir = project.file('build/electron')
        if (targetDir.exists()) {
            targetDir.deleteDir()
        }
        targetDir.mkdirs()

        exec {
            workingDir "${buildDir.path}/distributions/${project.name}"
            environment 'PATH', System.getenv('PATH') + File.pathSeparator + nodeDir.absolutePath
            if (isWindows) {
                commandLine 'cmd', '/c', '"../../../node_modules/.bin/electron-builder" --config'
            } else {
                commandLine '../../../node_modules/.bin/electron-builder', '--config'
            }
        }
    }
}

afterEvaluate {
    if (production) {
        tasks.getByName("copyResourcesForDce") { dependsOn(runDceKotlinJs) }
    }
    tasks.getByName("webpack-bundle") {
        dependsOn(po2json, copyResources, copyResourcesForDce)
    }
    tasks.getByName("webpack-run") { dependsOn(po2json, copyResources) }
    tasks.getByName("karma-start") { dependsOn(po2json, copyResources) }
}
