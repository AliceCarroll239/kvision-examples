apply plugin: 'kotlin-platform-js'
if (production) {
    apply plugin: 'kotlin-dce-js'
}
apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlinx-serialization'

dependencies {
    expectedBy project(':common')

    compile "org.jetbrains.kotlin:kotlin-stdlib-js:${kotlinVersion}"
    compile "pl.treksoft:kvision:${kvisionVersion}"
 }

kotlinFrontend {
    npm {
        dependency("css-loader")
        dependency("style-loader")
        dependency("less")
        dependency("less-loader")
        dependency("imports-loader")
        dependency("uglifyjs-webpack-plugin")
        dependency("file-loader")
        dependency("url-loader")
        dependency("jquery", "3.2.1")
        dependency("fecha", "2.3.2")
        dependency("snabbdom", "0.7.1")
        dependency("snabbdom-virtualize", "0.7.0")
        dependency("navigo", "7.0.0")
        npmdeps.eachLine { line ->
            def (name, version) = line.tokenize(" ")
            dependency(name, version)
        }
        devDependency("karma")
        devDependency("qunit")
    }

    webpackBundle {
        bundleName = "main"
        contentPath = file('src/main/web')
        proxyUrl = "http://localhost:8080"
        mode = production ? "production" : "development"
    }

    define "PRODUCTION", production

}

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js/${project.name}.js"
    kotlinOptions.sourceMap = !production
    kotlinOptions.moduleKind = 'umd'
}

compileTestKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js-tests/${project.name}-tests.js"
    kotlinOptions.sourceMap = !production
    kotlinOptions.moduleKind = 'umd'
}

task copyResources(type: Copy) {
    from "src/main/resources"
    into file(buildDir.path + "/js")
}

task copyResourcesForDce(type: Copy) {
    from "src/main/resources"
    from("${buildDir.path}/node_modules_imported/kvision") {
        include "css/**"
        include "img/**"
        include "js/**"
        include "hbs/**"
    }
    into file(buildDir.path + "/kotlin-js-min/main")
}

task dist(type: Copy, dependsOn: 'bundle') {
    from "src/main/web"
    from "${buildDir.path}/bundle"
    into file(buildDir.path + "/distributions/" + project.name)
}

task distZip(type: Zip, dependsOn: 'dist') {
    from (buildDir.path + "/distributions/" + project.name)
}

afterEvaluate {
    tasks.getByName("webpack-bundle") { dependsOn(copyResources, copyResourcesForDce) }
    tasks.getByName("webpack-run") { dependsOn(copyResources) }
    tasks.getByName("karma-start") { dependsOn(copyResources) }
}
