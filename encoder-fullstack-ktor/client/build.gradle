plugins {
    id "com.moowork.grunt" version "1.2.0"
}

apply plugin: 'kotlin-platform-js'
if (production) {
    apply plugin: 'kotlin-dce-js'
}
apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlinx-serialization'

dependencies {
    expectedBy project(':common')

    compile "org.jetbrains.kotlin:kotlin-stdlib-js:${kotlinVersion}"
    compile "pl.treksoft:kvision:${kvisionVersion}"
    compile "pl.treksoft:kvision-bootstrap:${kvisionVersion}"
    compile "pl.treksoft:kvision-select:${kvisionVersion}"
    compile "pl.treksoft:kvision-i18n:${kvisionVersion}"
    compile "pl.treksoft:kvision-remote:${kvisionVersion}"
 }

kotlinFrontend {
    sourceMaps = !production

    webpackBundle {
        bundleName = "main"
        sourceMapEnabled = false
        contentPath = file('src/main/web')
        proxyUrl = "http://localhost:8080"
        mode = production ? "production" : "development"
    }

    define "PRODUCTION", production

}

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js/${project.name}.js"
    kotlinOptions.sourceMap = !production
    kotlinOptions.sourceMapEmbedSources = "always"
    kotlinOptions.moduleKind = 'umd'
}

compileTestKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js-tests/${project.name}-tests.js"
    kotlinOptions.sourceMap = !production
    kotlinOptions.sourceMapEmbedSources = "always"
    kotlinOptions.moduleKind = 'umd'
}

task pot(type: GruntTask) {
    args = ["pot"]
}

task po2json(type: GruntTask) {
    args = ["default"]
    if (file('translation').isDirectory()) {
        inputs.dir(file('translation'))
        outputs.dir(file('build/resources/main'))
    }
}

pot.dependsOn 'installGrunt'
pot.dependsOn 'npmInstall'
po2json.dependsOn 'installGrunt'
po2json.dependsOn 'npmInstall'

task dist(type: Copy, dependsOn: 'bundle') {
    from "src/main/web"
    from "${buildDir.path}/bundle"
    into file(buildDir.path + "/distributions/" + project.name)
}

task distZip(type: Zip, dependsOn: 'dist') {
    from (buildDir.path + "/distributions/" + project.name)
}

afterEvaluate {
    tasks.getByName("webpack-bundle") { dependsOn(po2json/*, copyResourcesForDce*/) }
    tasks.getByName("webpack-run") { dependsOn(po2json) }
    tasks.getByName("karma-start") { dependsOn(po2json) }
}
